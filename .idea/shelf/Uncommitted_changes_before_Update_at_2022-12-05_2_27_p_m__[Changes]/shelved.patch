Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pymongo as pymongo\r\nfrom flask import Flask, request, jsonify\r\n# from flask_objectid_converter import ObjectIDConverter\r\nfrom pymongo import ReturnDocument\r\nfrom pymongo.server_api import ServerApi\r\nfrom Schemas import ReadingSchemaPost, CompareSchemaPost\r\nfrom bson import json_util, ObjectId\r\nimport datetime as dt\r\n# from flask_cors import CORS\r\n# loading private connection information from environment variables\r\n# from dotenv import load_dotenv\r\n# load_dotenv()\r\nimport os\r\n\r\nMONGODB_LINK = os.environ.get(\"MONGODB_LINK\")\r\nMONGODB_USER = os.environ.get(\"MONGODB_USER\")\r\nMONGODB_PASS = os.environ.get(\"MONGODB_PASS\")\r\n\r\nclient = pymongo.MongoClient(\"mongodb+srv://Mohaned:0000@cluster0.gvkvlw9.mongodb.net/?retryWrites=true&w=majority\", server_api=ServerApi('1'))\r\ndb = client.test\r\n\r\n\r\nif 'roomQuality' not in db.list_collection_names():\r\n    db.create_collection(\"roomQuality\",\r\n                         timeseries={'timeField': 'timestamp', 'metaField': 'sensorId', 'granularity': 'minutes'})\r\napp = Flask(__name__)\r\n\r\n\r\n# New reading from arduino\r\n@app.route('/read', methods=[\"POST\"])\r\ndef add_new_reading():\r\n    # JSON Object Template\r\n    # {\r\n    #     \"collection_id\": \"00000000000\",\r\n    #     \"time\": \"2022-02-02 14:32\",\r\n    #     \"temp\": \"22.33\",\r\n    #     \"humi\": \"10.43\",\r\n    #     \"lumi\": \"67.32\"\r\n    # }\r\n    # Get JSON Object\r\n    reading = request.json\r\n    # Validate JSON Object\r\n    # Schema Validation\r\n    error = ReadingSchemaPost().validate(reading)\r\n    if error:\r\n        return error, 400\r\n\r\n    # Parse JSON object --NOT NEEDED\r\n    coll_id = reading[\"collection_id\"]\r\n    time = reading[\"time\"]\r\n    temp = reading[\"temp\"]\r\n    humi = reading[\"humi\"]\r\n    lumi = reading[\"lumi\"]\r\n\r\n    # Write to DB\r\n\r\n    # Insert into db (coll_id, time, temp, humi, lumi)\r\n    try:\r\n        item1 = {\r\n            \"record_id\": \"00001\",\r\n            \"collection_id\": \"00000000000\",\r\n            \"timestamp\": dt.datetime.now(),\r\n            \"temp\": 10,\r\n            \"humi\": 22,\r\n            \"lumi\": 340\r\n\r\n        }\r\n        db.roomQuality.insert_one(item1)\r\n\r\n    except Exception as e:\r\n        return {\"error\": \"some error happened\"}, 500\r\n\r\n    return \"success\"\r\n\r\n\r\n# Get readings from DB\r\n@app.route('/collection/<collection_id>', methods=[\"GET\"])\r\ndef get_readings_from_collection(collection_id):\r\n    # Select from results DB using collection_id\r\n    try:\r\n        cursor = db.roomQuality.find({\"collection_id\": collection_id})\r\n        readings = list(cursor)\r\n        for reading in readings:\r\n            if \"_id\" in reading:\r\n                reading[\"_id\"] = str(reading[\"_id\"])\r\n\r\n        # Return readings from query\r\n        return jsonify(readings)\r\n    except Exception as e:\r\n        print(e)\r\n        return {\"error\": \"some error happened\"}, 501\r\n\r\n\r\n# Delete collection & all readings from collection in DB\r\n@app.route(\"/collection/<collection_id>\", methods=[\"DELETE\"])\r\ndef delete_collection(collection_id):\r\n    try:\r\n        # Delete collection from collection table\r\n        deleted_collection = db.roomQuality.find_one_and_delete({\"_id\":ObjectId(collection_id)}, projection={\"_id\":False})\r\n        if deleted_collection is None:\r\n            return {\"error\": \"Collection not found\"}, 404\r\n        if \"_id\" in deleted_collection:\r\n            deleted_collection[\"_id\"] = str(deleted_collection[\"_id\"])\r\n\r\n        # Delete readings from reading table\r\n        deleted_readings = db.roomQuality.delete_many({\"collection_id\": collection_id})\r\n        print(deleted_readings.deleted_count, \" readings deleted\")\r\n\r\n        # Return deleted readings\r\n        return jsonify(deleted_readings)\r\n\r\n    except Exception as e:\r\n        return {\"error\": \"some error happened\"}, 501\r\n\r\n\r\n# Compare data collection with inserted data\r\n@app.route(\"/collection/<collection_id>/compare/<temp>/<humi>/<lumi>\", methods=[\"GET\"])\r\ndef compare_collection(collection_id, temp, humi, lumi):\r\n    avg_temp = None\r\n    avg_humi = None\r\n    avg_lumi = None\r\n\r\n    temp_rating = 0\r\n    humi_rating = 0\r\n    lumi_rating = 0\r\n\r\n    return_msg = {}\r\n\r\n    # Select from collection DB using collection_id\r\n    try:\r\n        cursor = db.collection.find({\"collection_id\": collection_id})\r\n        readings = list(cursor)\r\n        for reading in readings:\r\n            if \"_id\" in reading:\r\n                reading[\"_id\"] = str(reading[\"_id\"])\r\n            # assign values from avg pipelines\r\n            avg_temp = reading[\"avgTemp\"]\r\n            avg_humi = reading[\"avgHumi\"]\r\n            avg_lumi = reading[\"avgLumi\"]\r\n\r\n        if temp.isnumeric():\r\n            if humi.isnumeric():\r\n                if lumi.isnumeric():\r\n                    # Calculate Percentage Rating\r\n                    temp_rating = (avg_temp / temp) * 100\r\n                    humi_rating = (avg_humi / humi) * 100\r\n                    lumi_rating = (avg_lumi / lumi) * 100\r\n\r\n                    return_msg = {\"Temperature\": \"{:.2f}%\".format(temp_rating, ),\r\n                                  \"Humidity\": \"{:.2f}%\".format(humi_rating),\r\n                                  \"Luminosity\": \"{:.2f}%\".format(lumi_rating)}\r\n\r\n                    # Return Grade Percentage for all values\r\n                    return jsonify(return_msg)\r\n                else:\r\n                    # Return Message for invalid luminosity value\r\n                    return {\"error\": \"Invalid Data for Luminosity\"}, 400\r\n            else:\r\n                # Return Message for invalid humidity value\r\n                return {\"error\": \"Invalid Data for Humidity\"}, 400\r\n        else:\r\n            # Return Message for invalid temperature value\r\n            return {\"error\": \"Invalid Data for Temperature\"}, 400\r\n\r\n        # Return readings from query\r\n        # return jsonify(readings)\r\n    except Exception as e:\r\n        print(e)\r\n        return {\"error\": \"some error happened\"}, 501\r\n\r\n\r\n# Compare data collection with JSON Object\r\n@app.route(\"/collection/<collection_id>/compare/\", methods=[\"POST\"])\r\ndef compare_collection_JSON(collection_id):\r\n    # JSON Object Template\r\n    # {\r\n    #     \"temp\": 22.33,\r\n    #     \"humi\": 10.43,\r\n    #     \"lumi\": 67.32\r\n    # }\r\n    # Get JSON Object\r\n    reading = request.json\r\n    # Schema Validation\r\n    error = CompareSchemaPost().validate(reading)\r\n    if error:\r\n        return error, 400\r\n\r\n    # Parse JSON object\r\n    temp = reading[\"temp\"]\r\n    humi = reading[\"humi\"]\r\n    lumi = reading[\"lumi\"]\r\n\r\n    avg_temp = None\r\n    avg_humi = None\r\n    avg_lumi = None\r\n\r\n    temp_rating = 0\r\n    humi_rating = 0\r\n    lumi_rating = 0\r\n\r\n    return_msg = {}\r\n\r\n    # Select from collection DB using collection_id\r\n    try:\r\n        cursor = db.collection.find({\"collection_id\": collection_id})\r\n        readings = list(cursor)\r\n        for reading in readings:\r\n            if \"_id\" in reading:\r\n                reading[\"_id\"] = str(reading[\"_id\"])\r\n            # assign values from avg pipelines\r\n            avg_temp = reading[\"avgTemp\"]\r\n            avg_humi = reading[\"avgHumi\"]\r\n            avg_lumi = reading[\"avgLumi\"]\r\n\r\n        if temp.isnumeric():\r\n            if humi.isnumeric():\r\n                if lumi.isnumeric():\r\n                    # Calculate Percentage Rating\r\n                    temp_rating = (avg_temp / temp) * 100\r\n                    humi_rating = (avg_humi / humi) * 100\r\n                    lumi_rating = (avg_lumi / lumi) * 100\r\n\r\n                    return_msg = {\"Temperature\": \"{:.2f}%\".format(temp_rating),\r\n                                  \"Humidity\": \"{:.2f}%\".format(humi_rating),\r\n                                  \"Luminosity\": \"{:.2f}%\".format(lumi_rating)}\r\n\r\n                    # Return Grade Percentage for all values\r\n                    return jsonify(return_msg)\r\n                else:\r\n                    # Return Message for invalid luminosity value\r\n                    return {\"error\": \"Invalid Data for Luminosity\"}, 400\r\n            else:\r\n                # Return Message for invalid humidity value\r\n                return {\"error\": \"Invalid Data for Humidity\"}, 400\r\n        else:\r\n            # Return Message for invalid temperature value\r\n            return {\"error\": \"Invalid Data for Temperature\"}, 400\r\n\r\n        # Return readings from query\r\n        # return jsonify(readings)\r\n    except Exception as e:\r\n        print(e)\r\n        return {\"error\": \"some error happened\"}, 501\r\n\r\n\r\n# Compare data collection with JSON Object\r\n@app.route(\"/comparetest\", methods=[\"POST\"])\r\ndef compare_test():\r\n    # JSON Object Template\r\n    # {\r\n    #     \"temp\": \"22.33\",\r\n    #     \"humi\": \"10.43\",\r\n    #     \"lumi\": \"67.32\"\r\n    # }\r\n    # Get JSON Object\r\n    reading = request.json\r\n    # Schema Validation\r\n    error = CompareSchemaPost().validate(reading)\r\n    if error:\r\n        return error, 400\r\n\r\n    # Parse JSON object\r\n    temp = reading[\"temp\"]\r\n    humi = reading[\"humi\"]\r\n    lumi = reading[\"lumi\"]\r\n\r\n    avg_temp = 27\r\n    avg_humi = 10\r\n    avg_lumi = 71\r\n\r\n    temp_rating = 0\r\n    humi_rating = 0\r\n    lumi_rating = 0\r\n\r\n    return_msg = {}\r\n\r\n    # Select from collection DB using collection_id\r\n    try:\r\n        if temp:\r\n            if humi:\r\n                if lumi:\r\n                    # Calculate Percentage Rating\r\n                    temp_rating = (avg_temp / temp) * 100\r\n                    humi_rating = (avg_humi / humi) * 100\r\n                    lumi_rating = (avg_lumi / lumi) * 100\r\n\r\n                    return_msg = {\"Temperature\": \"{:.2f}%\".format(temp_rating),\r\n                                  \"Humidity\": \"{:.2f}%\".format(humi_rating),\r\n                                  \"Luminosity\": \"{:.2f}%\".format(lumi_rating)}\r\n\r\n                    # Return Grade Percentage for all values\r\n                    return jsonify(return_msg)\r\n                else:\r\n                    # Return Message for invalid luminosity value\r\n                    return {\"error\": \"Invalid Data for Luminosity\"}, 400\r\n            else:\r\n                # Return Message for invalid humidity value\r\n                return {\"error\": \"Invalid Data for Humidity\"}, 400\r\n        else:\r\n            # Return Message for invalid temperature value\r\n            return {\"error\": \"Invalid Data for Temperature\"}, 400\r\n\r\n        # Return readings from query\r\n        # return jsonify(readings)\r\n    except Exception as e:\r\n        print(e)\r\n        return {\"error\": \"some error happened\"}, 501\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 350c246964bdebbf288bf3198cad0e78bba64e45)
+++ b/app.py	(date 1670267873696)
@@ -60,6 +60,7 @@
             "record_id": "00001",
             "collection_id": "00000000000",
             "timestamp": dt.datetime.now(),
+            "sensorId": 720,
             "temp": 10,
             "humi": 22,
             "lumi": 340
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"06a40b5a-e445-49bc-abe2-cc93741b8ced\" name=\"Changes\" comment=\"Can write in the database and made some small changes\">\r\n      <change beforePath=\"$PROJECT_DIR$/app.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Flask Main\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Hx9uKLzxghrgcR2jhW2tbkEjST\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"RQE-IoTProject\" type=\"Python.FlaskServer\">\r\n      <module name=\"RQE-IoTProject\" />\r\n      <option name=\"target\" value=\"$PROJECT_DIR$/app.py\" />\r\n      <option name=\"targetType\" value=\"PATH\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"06a40b5a-e445-49bc-abe2-cc93741b8ced\" name=\"Changes\" comment=\"\" />\r\n      <created>1669216090168</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1669216090168</updated>\r\n      <workItem from=\"1669216095730\" duration=\"3808000\" />\r\n      <workItem from=\"1669846435235\" duration=\"6715000\" />\r\n      <workItem from=\"1669917035545\" duration=\"40000\" />\r\n      <workItem from=\"1670003084456\" duration=\"2644000\" />\r\n      <workItem from=\"1670092698952\" duration=\"1207000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 350c246964bdebbf288bf3198cad0e78bba64e45)
+++ b/.idea/workspace.xml	(date 1670267874103)
@@ -1,7 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
     <list default="true" id="06a40b5a-e445-49bc-abe2-cc93741b8ced" name="Changes" comment="Can write in the database and made some small changes">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/app.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
